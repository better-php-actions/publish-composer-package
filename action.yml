name: Publish a Composer package
description: Publishes a Composer package to Packagist
branding:
  icon: package
  color: blue
inputs:
  package_slug:
    description: Package slug
    required: true
  package_name:
    description: Package name
    required: true
  with_gpg:
    description: Whether to use GPG to sign the commit
    required: false
    default: false
  gpg_key:
    description: GPG private key
    required: false
  gpg_passphrase:
    description: GPG passphrase
    required: false
  release_token:
    description: GitHub token of the user who will release the package
    default: ${{ github.token }}
    required: false
outputs:
  release_version_signed:
    description: The version that was released
    value: ${{ steps.release_signed.outputs.version }}
  release_version_unsigned:
    description: The version that was released
    value: ${{ steps.release_unsigned.outputs.version }}

runs:
  using: composite
  steps:
    - name: Import GPG key
      uses: crazy-max/ghaction-import-gpg@v5
      id: gpg
      if: ${{ inputs.with_gpg == 'true' }}
      with:
        gpg_private_key: ${{ inputs.gpg_key }}
        passphrase: ${{ inputs.gpg_passphrase }}
        git_config_global: true
        git_user_signingkey: true
        git_commit_gpgsign: true
        git_push_gpgsign: false

    - name: Check for package.json
      id: package_json
      run: |
        ${{ github.action_path}}/scripts/check-package-json.bash
      shell: bash

    - name: Copy package.json
      env:
        ACTION_DIR: ${{ github.action_path}}/templates
      run: |
        ${{ github.action_path}}/scripts/copy-package-json.bash
      if: ${{ steps.package_json.outputs.available == 'no' }}
      shell: bash

    - name: Copy releaserc
      env:
        ACTION_DIR: ${{ github.action_path}}
        MAIN_BRANCH: ${{ github.event.repository.default_branch }}
        PACKAGE_SLUG: ${{ inputs.package_slug }}
        PACKAGE_NAME: ${{ inputs.package_name }}
      run: |
        ${{ github.action_path}}/scripts/copy-releaserc.bash
      shell: bash

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: 18
        cache: npm
      if: ${{ steps.package_json.outputs.available == 'no' }}

    - name: Install dependencies
      run: npm install
      shell: bash

    - name: Release (GPG Signed)
      id: release_signed
      if: ${{ inputs.with_gpg == 'true' }}
      run: |
        npm run semantic-release
        echo "version=$(cat /tmp/next_version)" >> $GITHUB_OUTPUT
      shell: bash
      env:
        GIT_AUTHOR_NAME: ${{ steps.gpg.outputs.name}}
        GIT_AUTHOR_EMAIL: ${{ steps.gpg.outputs.email}}
        GIT_COMMITTER_NAME: ${{ steps.gpg.outputs.name}}
        GIT_COMMITTER_EMAIL: ${{ steps.gpg.outputs.email}}
        GITHUB_TOKEN: ${{ inputs.release_token }}

    - name: Release (Unsigned)
      id: release_unsigned
      if: ${{ inputs.with_gpg == 'false' }}

      run: |
        npm run semantic-release
        echo "version=$(cat /tmp/next_version)" >> $GITHUB_OUTPUT
      shell: bash
      env:
        GITHUB_TOKEN: ${{ inputs.release_token }}
